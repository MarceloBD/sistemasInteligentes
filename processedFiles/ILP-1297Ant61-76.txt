generating
numerical
literals
during
refinement
simon
anthony
alan
frisch
department
computer
science
university
york
york
email
simona
frisch
york
abstract
despite
rapid
emergence
success
inductive
logic
programming
problems
still
surround
number
handlingproblems
directly
inherited
from
choice
logic
programs
representation
language
conjecture
that
generalisation
representation
language
constraint
logic
programs
provides
effective
solution
this
problem
support
this
claim
with
presentation
algorithm
called
which
down
refinement
operator
delegate
task
finding
numerical
literals
handle
equations
equations
equations
uniform
furthermore
provides
more
generality
than
competing
approaches
since
numerical
literals
required
cover
positive
examples
available
references
jaffar
maher
constraint
logic
programming
survey
journal
logic
programming
jaffar
michaylov
stuckey
language
system
technical
report
watson
research
centre
karalic
ivan
bratko
first
order
regression
appear
journal
machine
learning
muggleton
inverse
entailment
progol
generation
computing
muggleton
page
beyond
first
order
learning
inductive
logic
programming
with
higher
order
logic
technical
report
oxford
university
computing
laboratory
muggleton
raedt
inductive
logic
programming
theory
methods
journal
logic
programming
sebag
rouveirol
constraint
inductive
logic
programming
proceedings
international
workshop
inductive
logic
programming
pages
published
technical
report
katholieke
universiteit
leuven
srinivasan
camacho
experiments
numerical
reasoning
with
inductive
logic
programming
appear